from typing import Union
from fastapi import FastAPI, HTTPException, Depends, status
from sqlalchemy.orm import Session
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from jose import JWTError, jwt
from datetime import datetime, timedelta
from passlib.context import CryptContext
from models import User
from database import SessionLocal, engine
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

origins = {
    #"http://127.0.0.1:8000/login",
    "http://localhost:8081",
}

# Configura CORS para desarrollo
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Depencias de la bd
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
        
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

SECRET_KEY = "Hola1234"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 2  

# Autenticacion de usuario
def authenticate_user(db: Session, username: str, password: str):
    user = get_user_by_username(db, username)
    if not user:
        return False
    if not pwd_context.verify(password, user.hashed_password):
        return False
    return user

#Token de acceso
def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.now(timezone.utc) + expires_delta
    else:
        expire = datetime.now(timezone.utc) + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

# Añade este modelo para recibir datos (en el caso del video de auth se llama usercreate
# pero aca voy a reulitizar esta)
class LoginData(BaseModel):
    username: str
    password: str

# token para el login
@app.post("/token")
def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = authenticate_user(db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

#token de verificacion
def verify_token(token: str = Depends(oauth2_scheme)):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise HTTPException(status_code=403, detail="Token invalido o expiro")
        return payload
    except JWTError:
        raise HTTPException(status_code=403, detail="Token invalido o expiro")

# Verifica el token    
@app.get("/verify-token/{token}")
async def verify_user_token(token: str):
    verify_token(token=token)
    return {"message": "Token valido"}   

@app.get("/")
def read_root():
    return {"Hello": "World"} 


@app.post("/login")
def login(login_data: LoginData):
    # Simula almacenamiento (aquí iría tu lógica de base de datos)

    if login_data.username == "admin" and login_data.password == "admin":
        print(f"Datos recibidos: Usuario: {login_data.username}, Contraseña: {login_data.password}")
        return {
            "estado": "recibido con exito",
            "datos_recibidos": login_data.dict()  # Envía los datos de vuelta para confirmación
        }
    else:
        print(f"Login invalido ingrese las credenciales correctas")
        raise HTTPException(status_code=401, detail="Credenciales inválidas")  
    
@app.get("/two")
def two():
    return {"ola": "si ves esto funciono " + "aaaaa"}

@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}